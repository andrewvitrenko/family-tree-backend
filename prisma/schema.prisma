generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tree {
  id      String   @id @default(uuid()) @db.Uuid
  name    String
  owner   User     @relation(fields: [ownerId], references: [id])
  ownerId String   @db.Uuid
  people  Person[]
}

// members are related to users sometimes
// create a request to get all trees that user is in and in this request check his members and than check their trees
model Person {
  id          String               @id @default(uuid()) @db.Uuid
  dateOfBirth DateTime
  dateOfDeath DateTime?
  firstName   String
  lastName    String
  sex         Sex
  treeId      String               @unique @db.Uuid
  tree        Tree                 @relation(fields: [treeId], references: [id])
  userId      String?              @unique @db.Uuid
  user        User?                @relation(fields: [userId], references: [id])
  children    ParentRelationship[] @relation("Child")
  parents     ParentRelationship[] @relation("Parent")
  wife        SpouseRelationship?  @relation("Wife")
  husband     SpouseRelationship?  @relation("Husband")
}

model SpouseRelationship {
  id        String @id @default(uuid()) @db.Uuid
  wifeId    String @unique @db.Uuid
  husbandId String @unique @db.Uuid
  husband   Person @relation("Husband", fields: [husbandId], references: [id])
  wife      Person @relation("Wife", fields: [wifeId], references: [id])
}

model ParentRelationship {
  id       String @id @default(uuid()) @db.Uuid
  parentId String @db.Uuid
  childId  String @db.Uuid
  parent   Person @relation("Parent", fields: [parentId], references: [id])
  child    Person @relation("Child", fields: [childId], references: [id])
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  dateOfBirth DateTime
  sex         Sex
  trees       Tree[]
  persons     Person[]
}

enum Sex {
  MALE
  FEMALE
}
