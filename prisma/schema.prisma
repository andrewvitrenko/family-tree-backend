generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tree {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()
  nodes     Node[]
}

model Node {
  id           String     @id @default(uuid()) @db.Uuid
  x            Int
  y            Int
  treeId       String     @db.Uuid
  tree         Tree       @relation(fields: [treeId], references: [id], onDelete: Cascade)
  person       Person?
  inRelations  Relation[] @relation("Source")
  outRelations Relation[] @relation("Target")
}

model Relation {
  id       String @id @default(uuid()) @db.Uuid
  sourceId String @db.Uuid
  targetId String @db.Uuid

  source Node @relation("Source", fields: [sourceId], references: [id])
  target Node @relation("Target", fields: [targetId], references: [id])

  @@unique([sourceId, targetId])
}

model Person {
  id          String    @id @default(uuid()) @db.Uuid
  dateOfBirth DateTime  @db.Timestamp()
  dateOfDeath DateTime? @db.Timestamp()
  firstName   String
  lastName    String
  sex         Sex
  nodeId      String    @unique @db.Uuid
  node        Node      @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  sex           Sex
  trees         Tree[]
  refreshTokens String[]
}

enum Sex {
  MALE
  FEMALE
}
